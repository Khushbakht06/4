""" С клавиатуры вводятся два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц,
B, C, D, E заполняется случайным образом целыми числами в интервале [-10,10]. Для тестирования использовать не случайное
заполнение, а целенаправленное.
Вид матрицы А:
D	Е
С	В
Для простоты все индексы в подматрицах относительные.
По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графика.
Программа должна использовать функции библиотек numpy  и mathplotlib

Вариант 10:
Формируется матрица F следующим образом: скопировать в нее А и если в С количество минимальных чисел в нечетных столбцах, чем количество максимальных чисел в четных строках, 
то поменять местами В и С симметрично, иначе С и Е поменять местами несимметрично.При этом матрица А не меняется. После чего если определитель матрицы А больше суммы диагональных элементов матрицы F,
то вычисляется выражение: A-1*A – K * F, иначе вычисляется выражение (AТ +GТ-F-1)*K, где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А, F и все матричные операции последовательно.
"""

import numpy as np
import matplotlib.pyplot as plt

def generate_matrix(N):
    # Генерация матрицы с целенаправленным заполнением
    A = np.zeros((N, N), dtype=int)
    for i in range(N):
        for j in range(N):
            if i < N//2 and j < N//2:
                A[i, j] = 10
            elif i < N//2 and j >= N//2:
                A[i, j] = -10
            elif i >= N//2 and j < N//2:
                A[i, j] = -5
            else:
                A[i, j] = 5
    return A

def copy_matrix(A):
    return np.copy(A)

def generate_F(A):
    return copy_matrix(A)

def plot_matrix(matrix, title):
    plt.imshow(matrix, cmap='viridis', interpolation='nearest')
    plt.title(title)
    plt.colorbar()
    plt.show()

def analyze_matrix(A, F, K):
    det_A = np.linalg.det(A)
    diag_sum_F = np.sum(np.diag(F))
    
    if det_A > diag_sum_F:
        result = np.linalg.inv(A) @ A - K * F
    else:
        G = np.tril(A)
        result = (A.T + G.T - F - np.eye(F.shape[0])) * K

    return result

# Ввод пользовательских значений K и N
K = float(input("Введите значение K: "))
N = int(input("Введите размерность матрицы N: "))

# Генерация матрицы A и F
A = generate_matrix(N)
F = generate_F(A)

print("\nМатрица A:")
print(A)

print("\nМатрица F:")
print(F)

# Построение графиков
plot_matrix(A, 'Матрица A')
plot_matrix(F, 'Матрица F')

# Анализ матриц и выполнение операций
result_matrix = analyze_matrix(A, F, K)
plot_matrix(result_matrix, 'Результат операции')
